/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.javafinal;

//imports
import static com.mycompany.javafinal.MovieAPIPopularHandler.getPopular;
import static com.mycompany.javafinal.MovieAPIPopularHandler.parsePopularResults;
import java.awt.HeadlessException;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URL;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author teoberbic
 */
public class HomeWindow extends javax.swing.JFrame {
    
    // declare fields the whole window could use
    private Movie movie;
    //hashmap to refrence movie by id = title
    Map<String, Movie> movieMap = new HashMap<>();
  
    /**
     * Creates new form HomeWindow1
     * @throws java.io.IOException
     */
    public HomeWindow() throws IOException {
        initComponents();
        setExtendedState(JFrame.MAXIMIZED_BOTH); // window is as wide and tall as possible when opened
        
        //try and get information from API and then parse it
        try {
           String jsonResponse = getPopular(); // returns json Response
           List<MovieAPIPopularHandler> movies = parsePopularResults(jsonResponse); //send json response into parse function and store result into a list of the popular movies
           int counter = 0;
            OUTER:
            for (MovieAPIPopularHandler popMovie : movies) {
                switch (counter) {
                    case 0 -> {
                        //first movie
                        Image image;
                        URL url = new URL("https://image.tmdb.org/t/p/w500" + popMovie.getPoster()); //get url
                        image = ImageIO.read(url); //store as an image
                        Image newImage = image.getScaledInstance(360, 490, Image.SCALE_DEFAULT); //scale it so it fits
                        jLabelHome2.setIcon(new ImageIcon(newImage)); //set it as the label icon
                        jLabelHome2.setText("");
                        jTextField1.setText("1. " + popMovie.getTitle()); //set the movie title right above it
                   }
                    case 1 -> {
                        Image image2;
                        URL url2 = new URL("https://image.tmdb.org/t/p/w500" + popMovie.getPoster());
                        image2 = ImageIO.read(url2);
                        Image newImage2 = image2.getScaledInstance(360, 490, Image.SCALE_DEFAULT);
                        jLabelHome4.setIcon(new ImageIcon(newImage2));
                        jLabelHome4.setText("");
                        jTextField2.setText("2. " + popMovie.getTitle());
                   }
                    case 2 -> {
                        Image image3;
                        URL url3 = new URL("https://image.tmdb.org/t/p/w500" + popMovie.getPoster());
                        image3 = ImageIO.read(url3);
                        Image newImage3 = image3.getScaledInstance(360, 490, Image.SCALE_DEFAULT);
                        jLabelHome6.setIcon(new ImageIcon(newImage3));
                        jLabelHome6.setText("");
                        jTextField3.setText("3. " + popMovie.getTitle());
                   }
                    default -> {
                        break OUTER;
                   }
                }
                counter++;
            }
        } catch (Exception e) {
            //if unable to get movie then set blank as poster, and text as movie not availible
            jTextField1.setText("NOT AVAILIBLE");
            jTextField2.setText("NOT AVAILIBLE");
            jTextField3.setText("NOT AVAILIBLE");
            jLabelHome2.setText("");
            jLabelHome4.setText("");
            jLabelHome6.setText("");
        }
         jTextAreaWatchList.setVisible(false);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jSearchBarMovie = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable6 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableFavorites = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jButton7 = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();
        jLabelHome1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldHome1 = new javax.swing.JTextField();
        jButton17 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jButton14 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabelHome3 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jSearchTextField = new javax.swing.JTextField();
        jSearchButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jSearchResultTable = new javax.swing.JTable();
        jButtonAddMain = new javax.swing.JButton();
        jComboBoxMain = new javax.swing.JComboBox<>();
        jLabelHome2 = new javax.swing.JLabel();
        jLabelHome4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabelHome6 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jHomeClear = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButtonRemoveWatched = new javax.swing.JButton();
        jComboBoxWatched = new javax.swing.JComboBox<>();
        jScrollPane8 = new javax.swing.JScrollPane();
        jWatchedTable = new javax.swing.JTable();
        jButtonAddWatched = new javax.swing.JButton();
        jButtonAddPRWatched = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jButtonRemoveFavorites = new javax.swing.JButton();
        jComboBoxFavorites = new javax.swing.JComboBox<>();
        jScrollPane7 = new javax.swing.JScrollPane();
        jFavoritesTable = new javax.swing.JTable();
        jButtonAddFavorites = new javax.swing.JButton();
        jButtonAddPRFavorites = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jButtonRemoveWatchList = new javax.swing.JButton();
        jComboBoxWatchList = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jWatchListTable = new javax.swing.JTable();
        jButtonAddWatchList = new javax.swing.JButton();
        jButtonMoreInfoWatchList = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTextAreaWatchList = new javax.swing.JTextArea();
        jLabelWatchList = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuSave = new javax.swing.JMenu();
        jMenuItemSave = new javax.swing.JMenuItem();
        jMenuItemLoad = new javax.swing.JMenuItem();

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title", "Genre", "Rotten Tomato Score"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jSearchBarMovie.setText("Search");
        jSearchBarMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSearchBarMovieActionPerformed(evt);
            }
        });

        jTable6.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title", "Genre", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane5.setViewportView(jTable6);

        jTableFavorites.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Title", "Year", "Genre", "Director", "Cast", "Rating"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTableFavorites);

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title", "Genre", "My Rating (Out of 10)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane6.setViewportView(jTable5);

        jButton18.setText("jButton18");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        jLabelHome1.setText("jLabel1");

        jLabel1.setText("jLabel1");

        jTextFieldHome1.setText("jTextField1");
        jTextFieldHome1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldHome1ActionPerformed(evt);
            }
        });

        jButton17.setText("jButton17");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 2, 13)); // NOI18N
        jLabel5.setText("Genres");

        jButton1.setText("Sci-Fi");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Horror");

        jButton6.setText("Comedy");

        jButton5.setText("2021");

        jButton4.setText("2022");

        jButton3.setText("2023");

        jButton10.setText("George Lucas");

        jButton9.setText("David Fincher");

        jButton8.setText("Christopher Nolan");

        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 2, 13)); // NOI18N
        jLabel6.setText("New Movies");

        jLabel8.setFont(new java.awt.Font("Helvetica Neue", 2, 13)); // NOI18N
        jLabel8.setText("Directors");

        jButton11.setText("Tom Holland");

        jButton12.setText("Dwayne Johnson");

        jButton13.setText("Daniel Radcliffe");

        jLabel9.setFont(new java.awt.Font("Helvetica Neue", 2, 13)); // NOI18N
        jLabel9.setText("Actors");

        jButton14.setText("Zendaya");

        jLabel10.setFont(new java.awt.Font("Helvetica Neue", 2, 13)); // NOI18N
        jLabel10.setText("Actresses");

        jButton15.setText("Emma Watson");

        jButton16.setText("Jenna Ortega");

        jLabel11.setText("jLabel11");

        jLabelHome3.setText("jLabel4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N

        jLabel2.setBackground(new java.awt.Color(173, 216, 230));
        jLabel2.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        jLabel2.setText("The Movie Organizer");

        jLabel7.setFont(new java.awt.Font("Verdana", 3, 24)); // NOI18N
        jLabel7.setText("Popular Movies Today");
        jLabel7.setOpaque(true);

        jSearchTextField.setBackground(new java.awt.Color(173, 216, 230));
        jSearchTextField.setFont(new java.awt.Font("Verdana", 2, 13)); // NOI18N
        jSearchTextField.setText("Enter movie here");
        jSearchTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jSearchTextFieldFocusGained(evt);
            }
        });
        jSearchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSearchTextFieldActionPerformed(evt);
            }
        });

        jSearchButton.setBackground(new java.awt.Color(173, 216, 230));
        jSearchButton.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        jSearchButton.setText("Search");
        jSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSearchButtonActionPerformed(evt);
            }
        });

        jSearchResultTable.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        jSearchResultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title", "Year", "Director", "Release Date", "Run Time", "Genre", "Cast", "Rating"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jSearchResultTable);

        jButtonAddMain.setBackground(new java.awt.Color(173, 216, 230));
        jButtonAddMain.setText("Add");
        jButtonAddMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddMainActionPerformed(evt);
            }
        });

        jComboBoxMain.setBackground(new java.awt.Color(173, 216, 230));
        jComboBoxMain.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        jComboBoxMain.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Watched", "Favorites", "Watch List" }));
        jComboBoxMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxMainActionPerformed(evt);
            }
        });

        jLabelHome2.setText("jLabel3");

        jLabelHome4.setText("jLabel4");

        jTextField1.setEditable(false);
        jTextField1.setBackground(new java.awt.Color(173, 216, 230));
        jTextField1.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jTextField1.setText("jTextField1");

        jTextField2.setEditable(false);
        jTextField2.setBackground(new java.awt.Color(173, 216, 230));
        jTextField2.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jTextField2.setText("jTextField2");

        jLabelHome6.setText("jLabel3");

        jTextField3.setEditable(false);
        jTextField3.setBackground(new java.awt.Color(173, 216, 230));
        jTextField3.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jTextField3.setText("jTextField3");

        jHomeClear.setBackground(new java.awt.Color(220, 0, 0));
        jHomeClear.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        jHomeClear.setText("Clear Search Results");
        jHomeClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jHomeClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(327, 327, 327)
                                .addComponent(jSearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSearchButton)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jHomeClear)
                                .addContainerGap())))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelHome2, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(165, 165, 165)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabelHome4, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(165, 165, 165)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelHome6, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(140, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jComboBoxMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonAddMain)
                                .addGap(15, 15, 15))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jSearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jSearchButton))
                    .addComponent(jHomeClear, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonAddMain))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelHome2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelHome4, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelHome6, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(904, 904, 904))
        );

        jTabbedPane1.addTab("Home", jPanel1);

        jButtonRemoveWatched.setBackground(new java.awt.Color(173, 216, 230));
        jButtonRemoveWatched.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        jButtonRemoveWatched.setText("Remove");
        jButtonRemoveWatched.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveWatchedActionPerformed(evt);
            }
        });

        jComboBoxWatched.setBackground(new java.awt.Color(173, 216, 230));
        jComboBoxWatched.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        jComboBoxWatched.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Favorites", "Watch List" }));
        jComboBoxWatched.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxWatchedActionPerformed(evt);
            }
        });

        jWatchedTable.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        jWatchedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title", "Year", "Director", "Release Date", "Run Time", "Genre", "Cast", "Rating", "Personal Rating"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane8.setViewportView(jWatchedTable);

        jButtonAddWatched.setBackground(new java.awt.Color(173, 216, 230));
        jButtonAddWatched.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        jButtonAddWatched.setText("Add");
        jButtonAddWatched.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddWatchedActionPerformed(evt);
            }
        });

        jButtonAddPRWatched.setBackground(new java.awt.Color(173, 216, 230));
        jButtonAddPRWatched.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        jButtonAddPRWatched.setText("Add Personal Rating");
        jButtonAddPRWatched.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddPRWatchedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 1475, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButtonAddPRWatched)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBoxWatched, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(82, 82, 82))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonAddWatched)
                .addGap(76, 76, 76)
                .addComponent(jButtonRemoveWatched)
                .addGap(20, 20, 20))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 688, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAddPRWatched)
                    .addComponent(jComboBoxWatched, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAddWatched)
                    .addComponent(jButtonRemoveWatched)))
        );

        jTabbedPane1.addTab("Watched", jPanel2);

        jButtonRemoveFavorites.setBackground(new java.awt.Color(173, 216, 230));
        jButtonRemoveFavorites.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        jButtonRemoveFavorites.setText("Remove");
        jButtonRemoveFavorites.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveFavoritesActionPerformed(evt);
            }
        });

        jComboBoxFavorites.setBackground(new java.awt.Color(173, 216, 230));
        jComboBoxFavorites.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        jComboBoxFavorites.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Watched", "Watch List" }));

        jFavoritesTable.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        jFavoritesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title", "Year", "Director", "Release Date", "Run Time", "Genre", "Cast", "Rating", "Personal Rating"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(jFavoritesTable);

        jButtonAddFavorites.setBackground(new java.awt.Color(173, 216, 230));
        jButtonAddFavorites.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        jButtonAddFavorites.setText("Add");
        jButtonAddFavorites.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddFavoritesActionPerformed(evt);
            }
        });

        jButtonAddPRFavorites.setBackground(new java.awt.Color(173, 216, 230));
        jButtonAddPRFavorites.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        jButtonAddPRFavorites.setText("Add Personal Rating");
        jButtonAddPRFavorites.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddPRFavoritesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 1475, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButtonAddPRFavorites)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBoxFavorites, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(84, 84, 84))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonAddFavorites)
                .addGap(79, 79, 79)
                .addComponent(jButtonRemoveFavorites)
                .addGap(22, 22, 22))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 687, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAddPRFavorites)
                    .addComponent(jComboBoxFavorites, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAddFavorites)
                    .addComponent(jButtonRemoveFavorites)))
        );

        jTabbedPane1.addTab("Favorites", jPanel3);

        jButtonRemoveWatchList.setBackground(new java.awt.Color(173, 216, 230));
        jButtonRemoveWatchList.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        jButtonRemoveWatchList.setText("Remove");
        jButtonRemoveWatchList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveWatchListActionPerformed(evt);
            }
        });

        jComboBoxWatchList.setBackground(new java.awt.Color(173, 216, 230));
        jComboBoxWatchList.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        jComboBoxWatchList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Watched", "Favorites" }));
        jComboBoxWatchList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxWatchListActionPerformed(evt);
            }
        });

        jWatchListTable.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        jWatchListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title", "Year", "Director", "Release Date", "Run Time", "Genre", "Cast", "Rating", "Personal Rating"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jWatchListTable);

        jButtonAddWatchList.setBackground(new java.awt.Color(173, 216, 230));
        jButtonAddWatchList.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        jButtonAddWatchList.setText("Add");
        jButtonAddWatchList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddWatchListActionPerformed(evt);
            }
        });

        jButtonMoreInfoWatchList.setBackground(new java.awt.Color(173, 216, 230));
        jButtonMoreInfoWatchList.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        jButtonMoreInfoWatchList.setText("More Info");
        jButtonMoreInfoWatchList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMoreInfoWatchListActionPerformed(evt);
            }
        });

        jTextAreaWatchList.setEditable(false);
        jTextAreaWatchList.setColumns(20);
        jTextAreaWatchList.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jTextAreaWatchList.setLineWrap(true);
        jTextAreaWatchList.setRows(5);
        jTextAreaWatchList.setWrapStyleWord(true);
        jScrollPane9.setViewportView(jTextAreaWatchList);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jButtonMoreInfoWatchList)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1193, Short.MAX_VALUE)
                .addComponent(jComboBoxWatchList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(82, 82, 82))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(217, 217, 217)
                .addComponent(jLabelWatchList, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 217, Short.MAX_VALUE)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57)
                .addComponent(jButtonAddWatchList)
                .addGap(40, 40, 40)
                .addComponent(jButtonRemoveWatchList)
                .addGap(32, 32, 32))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonMoreInfoWatchList)
                    .addComponent(jComboBoxWatchList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonAddWatchList)
                        .addComponent(jButtonRemoveWatchList))
                    .addComponent(jScrollPane9)
                    .addComponent(jLabelWatchList, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Watch List", jPanel4);
        jPanel4.getAccessibleContext().setAccessibleName("");

        jMenuSave.setText("File");
        jMenuSave.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N

        jMenuItemSave.setText("Save");
        jMenuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveActionPerformed(evt);
            }
        });
        jMenuSave.add(jMenuItemSave);

        jMenuItemLoad.setText("Load");
        jMenuItemLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLoadActionPerformed(evt);
            }
        });
        jMenuSave.add(jMenuItemLoad);

        jMenuBar1.add(jMenuSave);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 798, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(56, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
   
    //takes in a row of data and the table the data needs to be added to
    private void addRowToTable(Object[] row, JTable table) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.addRow(row);
    }
    
    //made function so I wouldn't have to do the same code for each tab
    private void removeMovieFromTable(JTable table){
        if (table.equals(jWatchListTable)) {
            jTextAreaWatchList.setText("");
            jTextAreaWatchList.setVisible(false);
            jLabelWatchList.setVisible(false);
        }
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int indexs[] = table.getSelectedRows();
        if (indexs.length == 0) {
            JOptionPane.showMessageDialog(this, "Movie Not Choosen", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else {
            for (int i = 0; i <indexs.length; i++) {
                model.removeRow(indexs[i]);
            }
        }
    }
    //made function so I wouldn't have to do the same code for each tab
    private void addMovietoTable(JComboBox comboBox, JTable thisTable, String optionOne, String optionTwo, JTable tableOptionOne, JTable tableOptionTwo){
        //get selected rows put them in a list
        int indexs[] = thisTable.getSelectedRows();
        //if nothing is selected and action is done give error message
        if (indexs.length == 0) {
            JOptionPane.showMessageDialog(this, "Movie Not Choosen", "ERROR", JOptionPane.ERROR_MESSAGE);
         } else {
            
            String comboBoxOption = comboBox.getSelectedItem().toString();
            TableModel tModel = thisTable.getModel();


            for (int i = 0; i < indexs.length; i++) {
               Object row[] = new Object[9];
               row[0] = tModel.getValueAt(indexs[i], 0);
               row[1] = tModel.getValueAt(indexs[i], 1);
               row[2] = tModel.getValueAt(indexs[i], 2);
               row[3] = tModel.getValueAt(indexs[i], 3);
               row[4] = tModel.getValueAt(indexs[i], 4);
               row[5] = tModel.getValueAt(indexs[i], 5);
               row[6] = tModel.getValueAt(indexs[i], 6);
               row[7] = tModel.getValueAt(indexs[i], 7);
               if (comboBoxOption.equals("Watch List")) {
                   row[8] = null;
               }  else {
                    row[8] = tModel.getValueAt(indexs[i], 8);
               }
                    //had to switch back to if statements here
                    // Add row to the selected table based on the combo dropdown option
                if (comboBoxOption.equals(optionOne)) {
                    addRowToTable(row, tableOptionOne);
                } else if (comboBoxOption.equals(optionTwo)) {
                    addRowToTable(row, tableOptionTwo);
                }
   
            }   
            
        }
    }
    private void jSearchBarMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSearchBarMovieActionPerformed
 
    }//GEN-LAST:event_jSearchBarMovieActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBoxWatchedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxWatchedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxWatchedActionPerformed

    private void jSearchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSearchTextFieldActionPerformed
        
    }//GEN-LAST:event_jSearchTextFieldActionPerformed

    private void jSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSearchButtonActionPerformed
        
        jSearchButton.setText("Searching"); //when clicked set text to searching
        jSearchButton.setEnabled(false); 
        // take what the user typed in
        String userInput = jSearchTextField.getText();
        Thread th = new Thread(){        
            @Override
            public void run(){
                //once they type something in
                if (userInput.isEmpty() == false) {
                    //save a string of the api website + the user search + my personalized API key
                    String apiUrl = "http://www.omdbapi.com/?t=" + userInput + "&apikey=9ba35bf";
                    // send the string to the UrlOpener method in the MovieApiHandler class which we can save as a movie once it returns the Gson deserialized info
                    try {
                        movie = MovieApiHandler.UrlOpener(apiUrl);
                        //if not a movie give it an error message
                        if (movie.getTitle() == null) {
                            JOptionPane.showMessageDialog(HomeWindow.this, "Sorry not a Movie. Try again", "NOT A MOVIE", JOptionPane.ERROR_MESSAGE);
                        } else {
                            // put all movie fields in a list
                                String data[] = {movie.getTitle(),
                                                movie.getYear(),
                                                movie.getDirector(),
                                                movie.getReleaseDate(),
                                                movie.getRuntime(),
                                                movie.getGenre(),
                                                movie.getCast(),
                                                movie.getRating()};
                                // get search result table and save it as a DefaultTableModel for adding functionality
                                DefaultTableModel tblModel = (DefaultTableModel) jSearchResultTable.getModel();
                                //add a new row in table by using the list "data"
                                tblModel.addRow(data);
                                movieMap.put(movie.getTitle(), movie);
                                }       
                        } catch (HeadlessException e) {
                                 JOptionPane.showMessageDialog(HomeWindow.this, "NO CONNECTION", "CONNECTION ERROR", JOptionPane.ERROR_MESSAGE);
                                }
                                jSearchButton.setText("Search");
                                jSearchButton.setEnabled(true);    
                        } 
                            }
        };
        th.start();
        jSearchTextField.setText("Enter Movie");
      
    }//GEN-LAST:event_jSearchButtonActionPerformed

    private void jComboBoxMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxMainActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxMainActionPerformed
    
    private void jButtonAddMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddMainActionPerformed
        //put the selected row in a list
        int indexs[] = jSearchResultTable.getSelectedRows();
        //if there is nothing in the list pop up a erro message dialog
        if (indexs.length == 0) {
            JOptionPane.showMessageDialog(this, "Movie Not Choosen", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else {
            // get which combobox option is selected
            String comboBoxOption = jComboBoxMain.getSelectedItem().toString();
            
            // get the main search result table model so we access differnt elements in the table
            TableModel modelHome = jSearchResultTable.getModel();

            //retreive values from a jTable row
            for (int i = 0; i < indexs.length; i++) {
               Object row[] = new Object[8];
               row[0] = modelHome.getValueAt(indexs[i], 0);
               row[1] = modelHome.getValueAt(indexs[i], 1);
               row[2] = modelHome.getValueAt(indexs[i], 2);
               row[3] = modelHome.getValueAt(indexs[i], 3);
               row[4] = modelHome.getValueAt(indexs[i], 4);
               row[5] = modelHome.getValueAt(indexs[i], 5);
               row[6] = modelHome.getValueAt(indexs[i], 6);
               row[7] = modelHome.getValueAt(indexs[i], 7);

                //originally had 3 if statements here, saw NetBeans suggestions so I looked into "Switch" and what it does...
                
                //code adapted from: https://www.w3schools.com/java/java_switch.asp
                // Add row to the selected table based on the combo dropdown option
                switch (comboBoxOption) {
                    case "Watched":
                        addRowToTable(row, jWatchedTable);
                        break;
                    case "Watch List":
                        addRowToTable(row, jWatchListTable);
                        break;
                    case "Favorites":
                        addRowToTable(row, jFavoritesTable);
                        break;
                }
                //end code from above url 
            }
        }
    }//GEN-LAST:event_jButtonAddMainActionPerformed

    private void jSearchTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSearchTextFieldFocusGained
        jSearchTextField.setText("");
    }//GEN-LAST:event_jSearchTextFieldFocusGained

    private void jButtonAddWatchedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddWatchedActionPerformed
        addMovietoTable(jComboBoxWatched, jWatchedTable, "Watch List", "Favorites", jWatchListTable, jFavoritesTable);
    }//GEN-LAST:event_jButtonAddWatchedActionPerformed

    private void jButtonRemoveWatchedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveWatchedActionPerformed
        removeMovieFromTable(jWatchedTable);
    }//GEN-LAST:event_jButtonRemoveWatchedActionPerformed

    private void jButtonAddWatchListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddWatchListActionPerformed
        addMovietoTable(jComboBoxWatchList, jWatchListTable, "Favorites", "Watched", jFavoritesTable, jWatchedTable);
    }//GEN-LAST:event_jButtonAddWatchListActionPerformed

    private void jButtonRemoveWatchListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveWatchListActionPerformed
        removeMovieFromTable(jWatchListTable);
    }//GEN-LAST:event_jButtonRemoveWatchListActionPerformed

    private void jButtonRemoveFavoritesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveFavoritesActionPerformed
        removeMovieFromTable(jFavoritesTable);
    }//GEN-LAST:event_jButtonRemoveFavoritesActionPerformed

    private void jButtonAddFavoritesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddFavoritesActionPerformed
        addMovietoTable(jComboBoxFavorites, jFavoritesTable, "Watched", "Watch List", jWatchedTable, jWatchListTable);
    }//GEN-LAST:event_jButtonAddFavoritesActionPerformed
    private void addPRhelper(int row, JTable table){
       int userResponse2 = -1;
        String userResponse = "";

        while (userResponse.equals("")) { //while user response hasnt been changed to a valid response do:
            userResponse = JOptionPane.showInputDialog(this,
                    "Enter your new Personal Rating for this Movie (1 being your least favorite to 10 being your favorite)",
                    "PICK A RATING", JOptionPane.INFORMATION_MESSAGE);

            //check if the user pressed "cancel" or closed the tab
            if (userResponse == null) {
                //exit
                return;
            }

            try {
                //try to parse the answer to an int
                userResponse2 = Integer.parseInt(userResponse);

                //check if the number is within the valid range
                if (userResponse2 >= 1 && userResponse2 <= 10) {
                    break; //exit the loop if a valid number is entered
                } else {
                    JOptionPane.showMessageDialog(null, "Please enter a number between 1 and 10.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    userResponse = "";
                }
            } catch (NumberFormatException e) {
                //hndle the case where the input is not a valid int
                JOptionPane.showMessageDialog(null, "Please enter a valid number (1-10)", "ERROR", JOptionPane.ERROR_MESSAGE);
                userResponse = "";
            }
        }
        table.setValueAt(userResponse2, row, 8); // set the personlized rating
    }
    private void jButtonAddPRWatchedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddPRWatchedActionPerformed
        int row = jWatchedTable.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Movie Not Choosen", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else {
                addPRhelper(row, jWatchedTable); 
        }

    }//GEN-LAST:event_jButtonAddPRWatchedActionPerformed

    private void jButtonAddPRFavoritesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddPRFavoritesActionPerformed
        int row = jFavoritesTable.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Movie Not Choosen", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else {
               addPRhelper(row, jFavoritesTable);
        }
        
    }//GEN-LAST:event_jButtonAddPRFavoritesActionPerformed

    private void jButtonMoreInfoWatchListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMoreInfoWatchListActionPerformed

        TableModel model = jWatchListTable.getModel();
        int row = jWatchListTable.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Movie Not Choosen", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else {
            jTextAreaWatchList.setVisible(true); 
            String title = model.getValueAt(row, 0).toString(); //get the title of the movie
            Movie selectedMovie = movieMap.get(title); // then store it in the hash map as the id of the movie for access
            if (selectedMovie == null) {
                JOptionPane.showMessageDialog(this, "CANT GET INFO FROM PREVIOUS LOAD, ADD MOVIE AGAIN", "ERROR", JOptionPane.ERROR_MESSAGE); //had trouble getting info from previous load
            }
            jTextAreaWatchList.setText(
                                       "Title: " + model.getValueAt(row, 0).toString()+"\n" + "\n" +
                                       "Year: " + model.getValueAt(row, 1).toString()+"\n" + "\n" +
                                       "Director: " + model.getValueAt(row, 2).toString()+"\n" + "\n" +
                                       "Release Date: " + model.getValueAt(row, 3).toString()+"\n" + "\n" +
                                       "Run Time: " + model.getValueAt(row, 4).toString()+"\n" + "\n" +
                                       "Genre: " + model.getValueAt(row, 5).toString()+"\n" + "\n" +
                                       "Cast: " + model.getValueAt(row, 6).toString()+"\n" + "\n" +
                                       "Rating: " + model.getValueAt(row, 7).toString()+"\n" + "\n" +
                                       "Box Office: " + selectedMovie.getBoxOffice() + "\n" + "\n" +
                                       "Plot: " + selectedMovie.getPlot() + "\n" );
            try { //try and get the images poster
                URL url = new URL(selectedMovie.getPoster());
                Image image = ImageIO.read(url);
                jLabelWatchList.setIcon(new ImageIcon(image));
                jLabelWatchList.setText("");
            } catch (IOException e) {

            }
        }

    }//GEN-LAST:event_jButtonMoreInfoWatchListActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed

    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton18ActionPerformed

    private void jTextFieldHome1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldHome1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldHome1ActionPerformed
    private void menuSaveHelper(DefaultTableModel model, JTable table, String fileName) {
    // code adapted from https://www.youtube.com/watch?v=LP7_DlIe670
    int selectedPane = jTabbedPane1.getSelectedIndex();
    boolean shown = false;
    
    if (table.getRowCount() == 0) { //if there is nothing in the table
        JOptionPane.showMessageDialog(this, "THERE IS NOTHING TO SAVE", "ERROR", JOptionPane.ERROR_MESSAGE);
    } else {
        for (int i = 0; i < model.getRowCount(); i++) { 
            if (model.getValueAt(i, 8) == null) { // check if the personal rating column is empty because it cant be empty if we want to save it
                if (selectedPane == 3) {
                    model.setValueAt("N/A", i, 8); //if its watchlist tab set it as "N/A" because there we cant add personal rating
                } else if (!shown) {
                    JOptionPane.showMessageDialog(this, "Enter a Personal Rating for each movie to save", "ERROR", JOptionPane.ERROR_MESSAGE); // display a message to get them to enter a rating
                    shown = true;
                }
            }
            
            //write to file
            String filePath = "/Users/teoberbic/Desktop/" + fileName;
            File file = new File(filePath);
            try {
                FileWriter fw = new FileWriter(file);
                BufferedWriter bw = new BufferedWriter(fw);

                for (int p = 0; p < table.getRowCount(); p++) {
                    for (int j = 0; j < table.getColumnCount(); j++) {
                        Object value = table.getValueAt(p, j);
                        //check for null and provide a default value "N/A"
                        String stringValue = (value != null ? value.toString() : "N/A");
                        bw.write(stringValue + "  ");
                         
                        //if it's the first col, update the movieMap
                      
                        if (j == 0) {
                           
                            if (movie != null) {
                                movieMap.put(stringValue, movie);
                            }
                        }   
                        
                    }
                    bw.newLine();
                }

                bw.close();
                fw.close();

            } catch (IOException ex) {
                Logger.getLogger(this.getName()).log(Level.SEVERE, null, ex);
            }
        }
        //end of code adapted
    }
}


    private void jMenuItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveActionPerformed
        int selectedPane = jTabbedPane1.getSelectedIndex();
        if (selectedPane == 0) {
            JOptionPane.showMessageDialog(this, "CANT SAVE HOME SCREEN", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else if (selectedPane == 1) {
            DefaultTableModel model = (DefaultTableModel)jWatchedTable.getModel();
            menuSaveHelper(model, jWatchedTable, "textTableWatched");
        } else if (selectedPane == 2) {
            DefaultTableModel model = (DefaultTableModel)jFavoritesTable.getModel();
            menuSaveHelper(model, jFavoritesTable, "textTableFavorites");
        } else if (selectedPane == 3) {
            DefaultTableModel model = (DefaultTableModel)jWatchListTable.getModel();
            menuSaveHelper(model, jWatchListTable, "textTableWatchList");
        }
    }//GEN-LAST:event_jMenuItemSaveActionPerformed
    private void menuLoadHelper(JTable table, String fileName) {
        // code adapted from https://www.youtube.com/watch?v=LP7_DlIe670
        
        //load from file
        String filePath = "/Users/teoberbic/Desktop/"+ fileName;
        File file = new File(filePath);
        
        try {
            FileReader fr = new FileReader(file);
            BufferedReader br = new BufferedReader(fr);
            
            DefaultTableModel model = (DefaultTableModel)table.getModel();
            Object[] lines = br.lines().toArray(); //create each line as list to prepare for inserting into table
            if (lines.length == 0 || (lines.length == 1 && lines[0].toString().trim().isEmpty())) { //if there is nothing in the file
                JOptionPane.showMessageDialog(this, "THERE IS NOTHING IN THE FILE", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
            for (int i = 0; i < lines.length; i++) {
                String[] row = lines[i].toString().split("  "); //write until there is a double space and add, then repeat for each movie in the file
                model.addRow(row);
                //create a Movie and populate its properties from the row
                
             
                //add the movie to the movieMap with its title as the key
                Movie loadedMovie = new Movie();
                loadedMovie.setTitle(row[0]);
                loadedMovie.setDirector(row[1]);
                loadedMovie.setreleaseDate(row[2]);
                loadedMovie.setRuntime(row[3]);
                loadedMovie.setGenre(row[4]);
                loadedMovie.setCast(row[5]);
                loadedMovie.setRating(row[6]);
                loadedMovie.setBoxOffice(row[7]);
                loadedMovie.setPlot(row[8]);
                
                try {
                    Movie b = movieMap.get(loadedMovie.getTitle());
                    String boxOffice = b.getBoxOffice();
                    String plot = b.getPlot();
                    loadedMovie.setBoxOffice(boxOffice);
                    loadedMovie.setPlot(plot);
                    String poster = b.getPoster();
                    loadedMovie.setPoster(poster);

                    String title = model.getValueAt(0, 0).toString();
                    movieMap.put(title, loadedMovie);
                } catch (NullPointerException e) {
                    
                }
            }
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(this.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "LOAD TO TAB SAVED FROM", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        //end of code adapted
    }


    private void jMenuItemLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLoadActionPerformed
        int selectedPane = jTabbedPane1.getSelectedIndex();
        if (selectedPane == 0) {
            JOptionPane.showMessageDialog(this, "CANT LOAD ANYTHING HOME SCREEN", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else if (selectedPane == 1) {
            menuLoadHelper(jWatchedTable, "textTableWatched");
        } else if (selectedPane == 2) {
            menuLoadHelper(jFavoritesTable, "textTableFavorites");
        } else if (selectedPane == 3) {
            menuLoadHelper(jWatchListTable, "textTableWatchList");
        }
    }//GEN-LAST:event_jMenuItemLoadActionPerformed

    private void jComboBoxWatchListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxWatchListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxWatchListActionPerformed

    private void jHomeClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jHomeClearActionPerformed
        DefaultTableModel table = (DefaultTableModel)jSearchResultTable.getModel();
        table.setRowCount(0);
    }//GEN-LAST:event_jHomeClearActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new HomeWindow().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(HomeWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JButton jButtonAddFavorites;
    private javax.swing.JButton jButtonAddMain;
    private javax.swing.JButton jButtonAddPRFavorites;
    private javax.swing.JButton jButtonAddPRWatched;
    private javax.swing.JButton jButtonAddWatchList;
    private javax.swing.JButton jButtonAddWatched;
    private javax.swing.JButton jButtonMoreInfoWatchList;
    private javax.swing.JButton jButtonRemoveFavorites;
    private javax.swing.JButton jButtonRemoveWatchList;
    private javax.swing.JButton jButtonRemoveWatched;
    private javax.swing.JComboBox<String> jComboBoxFavorites;
    private javax.swing.JComboBox<String> jComboBoxMain;
    private javax.swing.JComboBox<String> jComboBoxWatchList;
    private javax.swing.JComboBox<String> jComboBoxWatched;
    public javax.swing.JTable jFavoritesTable;
    private javax.swing.JButton jHomeClear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelHome1;
    private javax.swing.JLabel jLabelHome2;
    private javax.swing.JLabel jLabelHome3;
    private javax.swing.JLabel jLabelHome4;
    private javax.swing.JLabel jLabelHome6;
    private javax.swing.JLabel jLabelWatchList;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemLoad;
    private javax.swing.JMenuItem jMenuItemSave;
    private javax.swing.JMenu jMenuSave;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTextField jSearchBarMovie;
    private javax.swing.JButton jSearchButton;
    private javax.swing.JTable jSearchResultTable;
    private javax.swing.JTextField jSearchTextField;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable5;
    private javax.swing.JTable jTable6;
    private javax.swing.JTable jTableFavorites;
    private javax.swing.JTextArea jTextAreaWatchList;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextFieldHome1;
    public javax.swing.JTable jWatchListTable;
    public javax.swing.JTable jWatchedTable;
    // End of variables declaration//GEN-END:variables
}
